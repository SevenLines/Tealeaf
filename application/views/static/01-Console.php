 Для того чтобы писать приложения на <b>C#</b> совсем не обязательно скачивать тяжеловесную <b>Visual Studio 2010</b>, вполне хватит и <b>Express</b> версии,
которая является бесплатной (в том числе и для коммерческой разработки) весит в 6 раз меньше и отличается от полноценной студии 
лишь отсутствием некоторых встроенных инструментов, которыми вы скорее всего никогда (по крайне мере в студенческой жизни) не воспользуетесь.
Скачать можно отсюда 
<a href="http://download.microsoft.com/download/1/E/5/1E5F1C0A-0D5B-426A-A603-1798B951DDAE/VS2010Express1.iso">Visual Studio 2010 Express All-in-One ISO</a>.
Вообще говоря можно скачать и <b>Visual Studio 2012 Express</b>, но я не уверен запустятся ли ваши программы на машинах что стоят в аудитории.
<p>
Скачав образ диска его можно записать на диск, либо примонтировать с помощью например <b>DaemonTools</b>. И установить <b>Visual C# 2010 Express</b>.
Стоит отметить что установленную программу надо зарегистрировать. Скорее всего программа сама предложит это вам через некоторое время.
При регистрации придется указать свой <b>email</b>. Я указал одну из своих вполне рабочих почт, и за 3 года никакого спама не было. 
При регистрации вам выдадут ключик.
<hr>
<p>
Любая программа на <b>C#</b> имеет следующую базовую конструкцию
<pre class="brush: csharp">
using System;
using КакойТоВторойПакет;
using КакойТоТретийПакет;
...
using КакойТо100500ыйПакет;


namespace Some_Namespace_Name
{
    // Любая программа является классом
    class Some_Program
    {
        // тут начинается исполнение программы
        static void Main(string[] args)
        {
            ...
        }
    }
}
</pre>
<div class="note">
Создавая новую программу, <b>VisualStudio</b> автоматически создает так называемое пространство имен (в нашем случае <b>Some_Namespace_Name</b>), 
которое можно использовать при разработке другого приложения с помощью тех же операторов <b>using</b>, что у нас идут в самом начале программы.
</div>
<p>
Тут я покажу как в <b>C#</b> приложении запросить у пользователя список чисел, 
и в качестве результата вывести на экран четные числа из этого списка.
<pre class="brush: csharp">
using System;   // подключение пространства имен для использования основных типов данных
                // int, String, String[], int[] и т.д. а также объекта Console

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            /* все что находится между открывающей и закрывающей  
               фиугрными скобками называется телом функции */
            ...
        }
    }
}
</pre>
Весь последующий код надо записывать в тело функции <b>static void Main(string[] args)</b>
<p>
Сначала нам надо выделить переменные которые мы будем использовать для хранения
строки введенной пользователем, и под массив подстрок на которые мы разобьем введенную строку.
<pre class="brush: csharp">
// сюда сохраним строку введенную пользователем
String strNumbers; 
// это массив для подстрок входящих в строку
String[] strNumbersList;
</pre>

Черный экран консоли с серыми буквами уж больно депрессивен, 
так что почему бы и не добавить в него капельку радости:
<pre class="brush: csharp">
// установим заголовок консоли
Console.Title = "Я заголовок этой мрачной консоли T_T";
// меняем цвет текста на голубой
Console.ForegroundColor = ConsoleColor.Cyan;
// меняем цвет фона текста на темно-синий
Console.BackgroundColor = ConsoleColor.DarkBlue;
</pre>
Запрос данных у пользователя:
<pre class="brush: csharp">
// выводим на экран предложение ввести числа
Console.WriteLine("Введите числа через пробел:");

/* 
   приостанавливаем выполнения до тех пор пока пользователь не введет 
   некоторый текст и не нажмет ENTER,
   введенную строку сохраним в переменную strNumbers
*/
strNumbers = Console.ReadLine();
</pre>
Ну вроде строку текста от пользователя получили, теперь не плохо бы чего-нибудь с ней сделать.
Так как предполагается что пользователь ввел нам список чисел через пробел, мы разобьем пробелами нашу
строку на подстроки. Разбивается строка функцией <b>Split</b>. 

<pre class="brush: csharp">
// разобьем введенную пользователем сторку пробелами на подстроки
strNumbersList = strNumbers.Split(' ');
</pre>

<div class="note">
Все переменный типа <b>String</b> обладают функцией <b>Split</b>,
в качестве результат она возвращает массив строк, полученный разбиением строки разделителем указанным в качестве параметра.
<pre class="brush: csharp">
some_variable.Split(' ');
</pre>
Если хочется использовать более одного разделителя (например пробел и запятую) придется написать уже вот-такое заклинание
<pre class="brush: csharp">
some_variable.Split( new Char[]{' ' , ','} );

// или так, указывать тип массива не обязательно, в данном случае компилятор сам догадается по содержимому
some_variable.Split( new []{' ' , ','} );

// или так чтобы убрать пустые строки которые возникают, если у нас например два пробела подряд
some_variable.Split( new []{' ' , ','}, StringSplitOptions.RemoveEmptyEntries );
</pre>
</div>
<p>
Иногда вам захочется сбросить цвета в консоли на те что идут по умолчанию, для этого у объекта <b>Console</b>
есть метод <b>ResetColor</b>. Я сброшу цвета консоли на те унылые, что были по умолчанию и выведу сообщение о том,
что я сейчас я собираюсь вывести список четных чисел:
<pre class="brush: csharp">
// сбрасываем цвет фона и текста на скучные >_>
Console.ResetColor();
// выводим на экран сообщение; это хорошая практика всегда держать пользователя в курсе событий
Console.WriteLine("Среди введенных чисел, следующие числа являются четными:");
</pre>
Ну а теперь собственно то ради всего и затевалось, это вывод четных чисел на экран, каждое число в своей строчке.
<br>Перво наперво я верну свои веселые цвета:
<pre class="brush: csharp">
// меняем цвет текста на голубой
Console.ForegroundColor = ConsoleColor.Cyan;
// меняем цвет фона на темно-синий
Console.BackgroundColor = ConsoleColor.DarkBlue; 
</pre>
Ну и вторым шагом собственно сам вывод
<pre class="brush: csharp">
// проход по всем элементам массива strNumbersList, 
// свойство Length, очевидно, содержит количество элементов в массиве
for (int i = 0; i < strNumbersList.Length; ++i)
{
    // преобразуем подстроку в целое число
    int num1 = int.Parse( strNumbersList[i] );  /* для доступа к i-му элементу массива
                                                   используется операция индексации
                                                   проще говоря чтобы узнать значение 
                                                   i-го элемента надо написать 
                                                   что-то вроде some_array[i], 
                                                  
                                                   для 1-го элемента some_array[0]
                                                   для 2-го элемента some_array[1]
                                                   ...
                                                   для последнего some_array[ some_array.Length - 1 ]
                                                   да да нумерация с начинается с нуля!
                                                */
                                                
    // проверяем делиться ли число на 2 без остатка, то есть по сути проверка на четность
    if (num1 % 2 == 0)
    {
        // если так выведем на экран это число
        Console.WriteLine(num1);
    }
}
</pre>
<div class="note">
В C# четыре вида циклов:
<pre class="brush: csharp">
// 1. Стандартный сишный цикл. Перебор i от 0 до max_value - 1
for ( i=0; i < max_value; i++ ) 
{
    ...
}

// 2. Цикл для работы с массивами и коллекциями. Проходит по всем элементам коллекции.
// Не позволяет изменять значения коллекции, только смотреть их значение.
foreach (SomeType value in some_array) 
{
    ...
}

// ну и условные циклы

// 3. С предусловием, запуститься только если условие истинно
while( %some_condition_is_true% ) 
{
    ...
}

// 4. С постусловием, обязательно сделает один тик, и только
// потом пойдет проверять истинность условия
do
{
    ...
}
while( %some_condition_is_true% ) 
</pre>
А вот цикла вида <b>do ... until</b> - нет. Ну и пусть.
<br> Мы будем использовать в основном циклы вида 1 и 2. 
</div>  
<p>
Ну и последним шагом надо дать возможность пользователю рассмотреть выведенные числа.
Для этого мы приостановим программу до тех пор пока пользователь не нажмет какую-нибудь клавишу.
<pre class="brush: csharp">
// Иначе консоль автоматически закроется
// и весь вывод улетит в небытие...
Console.ReadKey();
</pre>
Вот и весь код \(^_^)/
<hr>
<h2>Результат работы:</h2>
<div class="console"> 
<span style="background:DarkBlue;color:Cyan">
Введите числа через пробел:<br>
12 123 78 3 2<br>
</span>
Среди введенных чисел, следующие числа являются четными:<br>
<span style="background:DarkBlue;color:Cyan">
12<br>
78<br>
2
</span>
</div>
<hr>
<h2>Полный листинг:</h2>

<pre class="brush: csharp;">
using System;
using System.Linq;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            // сюда сохраним строку введенную пользователем
            String strNumbers; 
            // это массив для подстрок входящих в строку
            String[] strNumbersList; 

            Console.Title = "Я заголовок этой мрачной консоли T_T";

            // меняем цвет текста на голубой
            Console.ForegroundColor = ConsoleColor.Cyan;
            // меняем цвет фона на темно-синий
            Console.BackgroundColor = ConsoleColor.DarkBlue;

            // выводим на экран предложение ввести числа
            Console.WriteLine("Введите числа через пробел:");
            // приостанавиливаем выполнения до тех пор пока пользователь не введет 
            // некоторый текст и не нажмет ENTER,
            // введенную строку сохраним в переменную strNumbers
            strNumbers = Console.ReadLine();

            // разобьем введенную пользователем сторку пробелами на подстроки
            strNumbersList = strNumbers.Split(' ');

            // сбрасываем цвет фона и текста на те что идут по умолчанию
            Console.ResetColor();
            // выводим на экран сообщение
            Console.WriteLine("Среди введенных чисел, следующие числа являются четными:");

            // меняем цвет текста на голубой
            Console.ForegroundColor = ConsoleColor.Cyan;
            // меняем цвет фона на темно-синий
            Console.BackgroundColor = ConsoleColor.DarkBlue; 

            /// перебираем все элементы массива, нумерация элементов массива начинается от 0
            for (int i = 0; i < strNumbersList.Length; ++i)
            {
                // преобразуем подстроку в целое число
                int num1 = int.Parse(strNumbersList[i]);
                // проверяем является число делиться ли оно на 2 без остатка
                if (num1 % 2 == 0)
                {
                    // если так выведем на экран это число
                    Console.WriteLine(num1);
                }
            }
            // Иначе консоль автоматически закроется
            // и весь вывод улетит в небытие...
            Console.ReadKey();
        }
    }
}
</pre>
<hr>
<h2>Альтернативные варианты:</h2>
Вообще говоря получить тот же результат можно еще как минимум 5 способами, я их на всякий пожарный оставлю здесь 
вдруг пригодится:
<p>
<div class="note">
<h3>Способ #2.</h3>
 С использованием цикла <b>foreach</b>. Наверное самый лучший способ в подобной ситуации. Я б использовал именно его.
<pre class="brush: csharp">
foreach (String subString in strNumbersList)
{
    // преобразуем подстроку в целое число
    int num2 = int.Parse(subString);
    // проверяем делиться ли число на 2 без остатка
    if (num2 % 2 == 0)
    {
        // если так выведем на экран это число
        Console.WriteLine(num2);
    }
}
</pre>
<h3>Способ #3.</h3>
Более хитрый способ с использованием встроенного языка <b>Linq</b>. 
Главное не забыть вверху подключить пространство имен System.Linq:
<pre class="brush: csharp">
using System;
using System.Linq; // для использования функции Select

...

// формируем из массива подстрок массив целых чисел,
// для этого используется функция Select
// ей в качестве параметра передается функция которая применяется
// к каждому элементу массива strNumbersList.
// ToArray() - необходимо чтобы преобразовать резульат функции Select в массив
int[] intArray = strNumbersList.Select(int.Parse).ToArray();
foreach (int num3 in intArray)
{
    // проверяем делиться ли число на 2 без остатка
    if (num3 % 2 == 0)
    {
        // если так выведем на экран это число
        Console.WriteLine(num3);
    }
}

</pre>
<h3>Способ #4.</h3> Еще более хитрый способ с использованием лямбда выражений (это та часть что "<b>x => x % 2 == 0</b>"). 
Оказывается за один шаг можно преобразовать массив строк в массив целых чисел и сразу же отсеять нечетные числа:
<pre class="brush: csharp">
int[] evenNumbers = strNumbersList.Select(int.Parse).Where(x => x % 2 == 0).ToArray();
foreach (int num4 in evenNumbers)
{
        // выведем на экран число
        Console.WriteLine(num4);
}
</pre>
<h3>Способ #5.</h3> 
Без использования цикла. С использованием функции <b>Join</b>. Функция <b>Join</b> является обратной для функции <b>Split</b>
и позволяет склеить массив строк в одну строку. Между каждыми элементами массива можно указать разделитель. 
Оказывается строку можно вывести как несколько строк для этого надо каждую подстроку отделить от другой 
символом перехода на новую строку <b>"\n"</b> (в <b>VBS</b> это была константа <b>VbCrLf</b>). Например:<br>
Строка <span class="consoleIn">"Пожалуй хватит\nна сегодня сишарпа"</span> в консоли будет выведена как:
<div class="console">
Пожалуй хватит<br>
на сегодня сишарпа
</div>
Способ выглядит вот так:
<pre class="brush: csharp">
// здесь мы одной строкой преобразовываем все подстроки к числам,
// и среди этих чисел выбираем четные числа
int[] evenNumbers2 = strNumbersList.Select(int.Parse).Where(x => x % 2 == 0).ToArray();

// из массива целых чисел формируем массив строк
String[] evenNumbersStr = evenNumbers2.Select(x => x.ToString()).ToArray();

// склеиваем все элементы масива строк в одну большую строку outputString
// String.Join(%разделитель строк%, %массив_строк%) возвращает объедененую строку
// "\n" - знак обозначает переход на новую строку
String outputString = String.Join("\n", evenNumbersStr);

// выводи эту строку на экран
Console.WriteLine(outputString);
</pre>
<h3>Способ #6.</h3> 
Стоит отметить, что способ 5 умещается в одну длинную мультикоманду.
Не рекомендуется к использованию, так как сильно затрудняет восприятие кода,

<pre class="brush: csharp">
Console.WriteLine(String.Join("\n",strNumbersList.Select(int.Parse).Where(x => x % 2 == 0).Select(x => x.ToString()).ToArray()));
</pre>
</div>